{"version":3,"sources":["components/title.js","components/startMenu.js","components/score.js","components/turn.js","components/xRender.js","components/oRender.js","components/board.js","components/displayWinner.js","utils/utils.js","components/game.js","App.js","serviceWorker.js","index.js"],"names":["Title","className","StartMenu","isGameStart","startGame","difficulty","changeDifficulty","type","value","onClick","Score","player","score","turnStyle","fontSize","padding","margin","Turn","isPlayerTurn","isXTurn","style","color","borderBottom","XRender","ORender","height","width","cx","cy","r","Board","cellsArray","playerAction","useState","index","setIndex","displayCells","map","cell","i","arr","key","onMouseEnter","onMouseLeave","DisplayWinner","displayWinner","playAgain","isWinning","backgroundColor","every","winArr","length","a","b","c","newCellsArray","target","currentChar","slice","concat","checkWinOnTurn","board","action","plays","reduce","e","gameWon","entries","elem","indexOf","Game","Array","from","keys","setCellsArray","setIsXTurn","Math","random","setIsPlayerTurn","setDisplayWinner","playerScore","setPlayerScore","computerScore","setComputerScore","easyAi","currentAction","random_action","floor","prevTurn","impossibleAi","aiSpot","minimax","newBoard","availableSpots","filter","bestMove","moves","move","result","push","bestScore","updatedScore","prevScore","useEffect","timeOut","setTimeout","clearTimeout","console","log","emptyCells","App","setIsGameStart","setDifficulty","event","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2NAaeA,MAXf,WACI,OACI,yBAAKC,UAAU,SACX,wBAAIA,UAAU,eAAd,OACA,wBAAIA,UAAU,eAAd,OACA,wBAAIA,UAAU,eAAd,SCgCGC,MApCf,YAA4E,IAAxDC,EAAuD,EAAvDA,YAAaC,EAA0C,EAA1CA,UAAWC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,iBAEpD,OACI,yBAAKL,UAAWE,EAAW,gCACvB,kBAAC,EAAD,MACA,yBAAKF,UAAU,qBACX,wBAAIA,UAAU,qBAAd,qBACA,yBAAKA,UAAU,qBACX,2BACIM,KAAK,SACLN,UAA0B,SAAfI,EAAyB,kCAAoC,eACxEG,MAAM,OACNC,QAASH,IAEb,2BACIC,KAAK,SACLN,UAA0B,WAAfI,EAA2B,kCAAoC,eAC1EG,MAAM,SACNC,QAASH,IAEb,2BACIC,KAAK,SACLN,UAA0B,eAAfI,EAA+B,kCAAoC,eAC9EG,MAAM,aACNC,QAASH,KAGjB,uBAAGL,UAAU,sBAAb,uBAAsD,8BAAOI,KAEjE,yBAAKJ,UAAU,kBACX,4BAAQA,UAAU,aAAaQ,QAASL,GAAxC,Y,OC3BDM,MAJf,YAAiC,IAAjBC,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,MACpB,OAAO,wBAAIX,UAAU,SAASU,EAAvB,KAAgC,8BAAOC,K,OCYlD,IAAMC,EAAY,CAChBC,SAAU,SACVC,QAAS,QACTC,OAAQ,QAGKC,EAnBf,YAAwC,IAAzBC,EAAwB,EAAxBA,aAAcC,EAAU,EAAVA,QACzB,OACI,yBAAKlB,UAAU,QACX,wBACImB,MAAOD,EAAO,2BACFN,GADE,IACSQ,MAAO,iBAAkBC,aAAc,6BADhD,2BAEFT,GAFE,IAESQ,MAAO,gBAAiBC,aAAc,6BACxDJ,EAAe,cAAgB,mBCErCK,MATf,WACI,OACI,yBAAKtB,UAAU,UACX,yBAAKA,UAAU,WACf,yBAAKA,UAAU,cCMZuB,MAVf,WACI,OACI,yBAAKvB,UAAU,UACX,yBAAKwB,OAAO,KAAKC,MAAM,MACnB,4BAAQzB,UAAU,SAAS0B,GAAG,KAAKC,GAAG,KAAKC,EAAE,UC2B9CC,MA7Bf,YAAmE,IAAnDC,EAAkD,EAAlDA,WAAYC,EAAsC,EAAtCA,aAAcb,EAAwB,EAAxBA,QAASD,EAAe,EAAfA,aAAe,EACpCe,mBAAS,KAD2B,mBACvDC,EADuD,KAChDC,EADgD,KAGxDC,EAAeL,EAAWM,KAAI,SAACC,EAAMC,EAAGC,GAAV,OAChC,yBACIC,IAAG,cAASF,EAAE,GACdtC,UAAWiC,IAAUK,GAAKpB,GAA6B,kBAAXqB,EAAID,IAAmBrB,EACrD,oBACAgB,IAAUK,IAAMpB,GAA6B,kBAAXqB,EAAID,IAAmBrB,EACzD,oBACA,OACdT,QAAS,kBAAMuB,EAAaO,IAC5BG,aAAc,kBAAMP,EAASI,IAC7BI,aAAc,kBAAMR,EAAS,OAEb,MAAXK,EAAID,GAAa,kBAAC,EAAD,MAAyB,MAAXC,EAAID,GAAa,kBAAC,EAAD,MAAc,SAI3E,OACI,yBAAKtC,UAAU,mBACX,yBAAKA,UAAU,cACVmC,KCRFQ,MAhBf,YAAkG,IAA1EC,EAAyE,EAAzEA,cAAeC,EAA0D,EAA1DA,UAAWf,EAA+C,EAA/CA,WAAYgB,EAAmC,EAAnCA,UAAW7B,EAAwB,EAAxBA,aAAcC,EAAU,EAAVA,QACnF,OACI,yBAAKlB,UAAW4C,EAAgB,iBAAmB,QAC/C,wBACIzB,MAAOD,EAAU,CAAC6B,gBAAiB,iBAClB,CAACA,gBAAiB,mBAElC9B,GAAgB6B,EAAUhB,GAAc,gBACvCA,EAAWkB,OAAM,SAAAX,GAAI,OAAIA,OAAUS,EAAUhB,GAC7C,aACD,eACL,4BAAQtB,QAASqC,GAAjB,W,OCbNI,EAAS,CACb,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGT,SAASH,EAAUhB,GACf,IAAK,IAAIQ,EAAI,EAAGA,EAAIW,EAAOC,OAAQZ,IAAK,CAAC,IAAD,cAClBW,EAAOX,GADW,GAC7Ba,EAD6B,KAC1BC,EAD0B,KACvBC,EADuB,KAEpC,GAAIvB,EAAWqB,IAAMrB,EAAWqB,KAAOrB,EAAWsB,IAC9CtB,EAAWqB,KAAOrB,EAAWuB,GACzB,MAAO,CAACF,EAAGC,EAAGC,GAG1B,OAAO,EAGX,SAASC,EAAcf,EAAKgB,EAAQC,GAChC,OAAOjB,EAAIkB,MAAM,EAAGF,GAAQG,OAAOF,GAAaE,OAAOnB,EAAIkB,MAAMF,EAAS,IAG9E,SAASI,EAAeC,EAAOC,GAC7B,IADqC,EACjCC,EAAQF,EAAMG,QAAO,SAACZ,EAAGa,EAAG1B,GAC9B,OAAQ0B,IAAMH,EAAUV,EAAEO,OAAOpB,GAAKa,IACrC,IACCc,GAAU,EAJuB,cAKZhB,EAAOiB,WALK,IAKrC,2BAA2C,CAAC,IAAD,yBAAjCjC,EAAiC,KACzC,GADyC,KACjCe,OAAM,SAAAmB,GAAI,OAAIL,EAAMM,QAAQD,IAAS,KAAI,CAC/CF,EAAU,CACRhC,MAAOA,EACP4B,OAAQA,GAEV,QAXiC,8BAcrC,OAAOI,ECoFMI,MApHf,YAA0C,IAA3BnE,EAA0B,EAA1BA,YAAaE,EAAa,EAAbA,WAAa,EACD4B,mBAASsC,MAAMC,KAAKD,MAAM,GAAGE,SAD5B,mBAC9B1C,EAD8B,KAClB2C,EADkB,OAEPzC,oBAAS,GAFF,mBAE9Bd,EAF8B,KAErBwD,EAFqB,OAGG1C,mBAAS2C,KAAKC,SAAW,IAH5B,mBAG9B3D,EAH8B,KAGhB4D,EAHgB,OAIK7C,oBAAS,GAJd,mBAI9BY,EAJ8B,KAIfkC,EAJe,OAKC9C,mBAAS,GALV,mBAK9B+C,EAL8B,KAKjBC,EALiB,OAMKhD,mBAAS,GANd,mBAM9BiD,EAN8B,KAMfC,EANe,KAiB/BC,EAAS,SAACC,GAEZ,IADA,IAAIC,EAAgBV,KAAKW,MAAMX,KAAKC,SAAW9C,EAAWoB,QACf,kBAA9BpB,EAAWuD,IACpBA,EAAgBV,KAAKW,MAAMX,KAAKC,SAAW9C,EAAWoB,QAE1DuB,EAAcnB,EAAcxB,EAAYuD,EAAeD,IACvDV,GAAW,SAAAa,GAAQ,OAAKA,KACxBV,GAAgB,IAGdW,EAAe,SAACJ,GAClB,IAAMK,EDOd,SAASC,EAAQC,EAAU9B,GACvB,IAAI+B,EAAiBD,EAASE,QAAO,SAAAxD,GAAI,MAAoB,kBAATA,KAEpD,GAAIsB,EAAegC,EAAU,KAC3B,MAAO,CAAEhF,OAAQ,IACZ,GAAIgD,EAAegC,EAAU,KAClC,MAAO,CAAEhF,MAAO,IACX,GAA8B,IAA1BiF,EAAe1C,OACxB,MAAO,CAAEvC,MAAO,GAKlB,IAFA,IAmBImF,EAnBAC,EAAQ,GAEHzD,EAAI,EAAGA,EAAIsD,EAAe1C,OAAQZ,IAAK,CAC9C,IAAI0D,EAAO,GAIX,GAHAA,EAAK/D,MAAQ0D,EAASC,EAAetD,IACrCqD,EAASC,EAAetD,IAAMuB,EAEf,MAAXA,EAAgB,CAClB,IAAIoC,EAASP,EAAQC,EAAU,KAC/BK,EAAKrF,MAAQsF,EAAOtF,UACf,CACL,IAAIsF,EAASP,EAAQC,EAAU,KAC/BK,EAAKrF,MAAQsF,EAAOtF,MAGtBgF,EAASC,EAAetD,IAAM0D,EAAK/D,MACnC8D,EAAMG,KAAKF,GAKb,GAAe,MAAXnC,EAEF,IADA,IAAIsC,GAAa,IACR7D,EAAE,EAAGA,EAAEyD,EAAM7C,OAAQZ,IACxByD,EAAMzD,GAAG3B,MAAQwF,IACnBA,EAAYJ,EAAMzD,GAAG3B,MACrBmF,EAAWxD,QAMf,IADA,IAAI6D,EAAY,IACP7D,EAAE,EAAGA,EAAEyD,EAAM7C,OAAQZ,IACxByD,EAAMzD,GAAG3B,MAAQwF,IACnBA,EAAYJ,EAAMzD,GAAG3B,MACrBmF,EAAWxD,GAKjB,OAAOyD,EAAMD,GC1DMJ,CAAQ,YAAI5D,GAAasD,GAAenD,MACvDwC,EAAcnB,EAAc,YAAIxB,GAAa2D,EAAQL,IACrDV,GAAW,SAAAa,GAAQ,OAAKA,KACxBV,GAAgB,IAkCduB,EAAe,WACbtD,EAAUhB,KACNb,EACAiE,GAAiB,SAAAmB,GAAS,OAAIA,EAAY,KAE1CrB,GAAe,SAAAqB,GAAS,OAAIA,EAAY,OAqBpD,OATAC,qBAhDuB,WACnB,IAAIC,EAgBJ,OAfKtF,GAAiB6B,EAAUhB,IAAgBc,IAAiB1C,IAChEqG,EAAUC,YAAW,WAClB,IAAMpB,EAAgBlE,EAAU,IAAM,IACtC,GAAmB,SAAfd,EACA+E,EAAOC,QAEN,GAAmB,WAAfhF,EAAyB,CACLuE,KAAKC,SACX,GAAMO,EAAOC,GAAiBI,EAAaJ,OAE1C,eAAfhF,GACLoF,EAAaJ,KAGlB,MACI,WACHqB,aAAaF,MA8BK,CAACtF,EAAc2B,EAAe1C,IAExDoG,qBAAU,YACFxD,EAAUhB,SARgB,IADPA,EAAW+D,QAAO,SAAAxD,GAAI,MAAoB,kBAATA,KACrCa,QACf4B,GAAiB,MAQjBA,GAAiB,KAEtB,CAAChD,IAEJ4E,QAAQC,IAAI7D,EAAUhB,IAElB,yBAAK9B,UAAWE,EAAW,uBACvB,yBAAKF,UAAU,eACX,kBAAC,EAAD,CAAOU,OAAQ,SAAUC,MAAOoE,IAChC,kBAAC,EAAD,CAAOrE,OAAQ,WAAYC,MAAOsE,KAEtC,kBAAC,EAAD,CAAMhE,aAAcA,EAAc6B,UAAWA,EAAUhB,GAAaZ,QAASA,IAC7E,kBAAC,EAAD,CACIY,WAAYA,EACZC,aA5FS,SAACO,GACW,kBAAlBR,EAAWQ,KAAoBQ,EAAUhB,IAAeb,IAE/DwD,EAAcnB,EAAcxB,EAAYQ,EADpBpB,EAAU,IAAM,MAEpCwD,GAAW,SAAAa,GAAQ,OAAKA,KACxBV,GAAgB,KAwFZ3D,QAASA,EACTD,aAAcA,IAElB,kBAAC,EAAD,CACI2B,cAAeA,EACfC,UAlDM,WACduD,IACAtB,GAAiB,GACjB,IAAM8B,EAAatC,MAAMC,KAAKD,MAAM,GAAGE,QACvCC,EAAcmC,GACd/B,EAAgBF,KAAKC,SAAW,IAChCF,GAAW,IA6CH5C,WAAYA,EACZgB,UAAWA,EACX7B,aAAcA,EACdC,QAASA,MCtFV2F,MA1Bf,WAAgB,IAAD,EACyB7E,oBAAS,GADlC,mBACN9B,EADM,KACO4G,EADP,OAEuB9E,mBAAS,UAFhC,mBAEN5B,EAFM,KAEM2G,EAFN,KAYb,OACE,yBAAK/G,UAAU,kBACb,kBAAC,EAAD,CACIE,YAAaA,EACbC,UAZU,WAChB2G,GAAe,IAYT1G,WAAYA,EACZC,iBAViB,SAAC2G,GACxBD,EAAcC,EAAMzD,OAAOhD,UAWzB,kBAAC,EAAD,CAAML,YAAaA,EAAaE,WAAYA,MCd9B6G,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,a","file":"static/js/main.1e57e623.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Title() {\r\n    return (\r\n        <div className='title'>\r\n            <h1 className='title-words'>Tic</h1>\r\n            <h1 className='title-words'>Tac</h1> \r\n            <h1 className='title-words'>Toe</h1>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Title","import React from 'react'\r\nimport Title from './title'\r\n\r\nfunction StartMenu({isGameStart, startGame, difficulty, changeDifficulty}) {\r\n    \r\n    return (\r\n        <div className={isGameStart ? `menu fade-out` : `menu fade-in`}>\r\n            <Title />\r\n            <div className='choose-difficulty'>\r\n                <h3 className='choose-difficulty'>Choose Difficulty</h3>\r\n                <div className='difficulty-inputs'>\r\n                    <input \r\n                        type='button' \r\n                        className={difficulty === 'Easy' ?  'difficulties selectedDifficulty' : 'difficulties'} \r\n                        value='Easy' \r\n                        onClick={changeDifficulty}\r\n                    />\r\n                    <input \r\n                        type='button' \r\n                        className={difficulty === 'Medium' ?  'difficulties selectedDifficulty' : 'difficulties'} \r\n                        value='Medium'\r\n                        onClick={changeDifficulty}\r\n                    />\r\n                    <input \r\n                        type='button' \r\n                        className={difficulty === 'Impossible' ?  'difficulties selectedDifficulty' : 'difficulties'} \r\n                        value='Impossible'\r\n                        onClick={changeDifficulty}\r\n                    />\r\n                </div>\r\n                <p className='current-difficulty'>Current Difficulty: <span>{difficulty}</span></p>\r\n            </div>\r\n            <div className='start-btn-area'>\r\n                <button className='start-game' onClick={startGame}>Start</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StartMenu","import React from 'react'\r\n\r\nfunction Score({player, score}) {\r\n    return <h3 className='score'>{player}: <span>{score}</span></h3>\r\n}\r\n\r\nexport default Score","import React from 'react'\r\n\r\nfunction Turn({isPlayerTurn, isXTurn}) {\r\n    return (\r\n        <div className='turn'>\r\n            <h2\r\n                style={isXTurn \r\n                      ? {...turnStyle, color: 'var(--blue-bg)', borderBottom: '3px solid var(--blue-bg)'} \r\n                      : {...turnStyle, color: 'var(--red-bg)', borderBottom: '3px solid var(--red-bg)'}}>\r\n                    {isPlayerTurn ? 'Player Turn' : 'Computer Turn'}\r\n            </h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst turnStyle = {\r\n  fontSize: '1.9rem',\r\n  padding: '0.3em',\r\n  margin: 'auto'\r\n}\r\n\r\nexport default Turn","import React from 'react';\r\n\r\nfunction XRender() {\r\n    return (\r\n        <div className='x-cell'>\r\n            <div className='x-left'></div>\r\n            <div className='x-right'></div>\r\n        </div>\r\n    )   \r\n}\r\n\r\nexport default XRender","import React from 'react'\r\n\r\nfunction ORender() {\r\n    return (\r\n        <div className='o-cell'>\r\n            <svg height=\"60\" width=\"60\">\r\n                <circle className='circle' cx=\"29\" cy=\"30\" r=\"25\" />\r\n            </svg>\r\n        </div>\r\n    )   \r\n}\r\n\r\nexport default ORender","import React, {useState} from 'react'\r\nimport XRender from './xRender'\r\nimport ORender from './oRender'\r\n\r\nfunction Board({cellsArray, playerAction, isXTurn, isPlayerTurn}) {\r\n    const [index, setIndex] = useState(100);\r\n\r\n    const displayCells = cellsArray.map((cell, i, arr) => (\r\n        <div \r\n            key={`cell${i+1}`}\r\n            className={index === i && isXTurn && typeof arr[i] === 'number' && isPlayerTurn\r\n                        ? 'cell x-turn-hover' \r\n                        : index === i && !isXTurn && typeof arr[i] === 'number' && isPlayerTurn\r\n                        ? 'cell o-turn-hover'\r\n                        : 'cell'}\r\n            onClick={() => playerAction(i)}\r\n            onMouseEnter={() => setIndex(i)}\r\n            onMouseLeave={() => setIndex(100)}\r\n            >\r\n                {arr[i] === 'X' ? <XRender /> : arr[i] === 'O' ? <ORender /> : null}\r\n        </div>\r\n    ))\r\n    \r\n    return (\r\n        <div className='board-container'>\r\n            <div className='game-board'>\r\n                {displayCells}\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Board\r\n\r\n","import React from 'react'\r\n\r\nfunction DisplayWinner({displayWinner, playAgain, cellsArray, isWinning, isPlayerTurn, isXTurn}) {\r\n    return (\r\n        <div className={displayWinner ? 'display-winner' : 'hide'}>\r\n            <h2\r\n                style={isXTurn ? {backgroundColor: 'var(--red-bg)'}\r\n                               : {backgroundColor: 'var(--blue-bg)'}}\r\n            >\r\n                {isPlayerTurn && isWinning(cellsArray) ? 'Computer Win!' \r\n                : cellsArray.every(cell => cell) && !isWinning(cellsArray) \r\n                ? 'It\\'s a tie'\r\n                :'Player Win!'}</h2>\r\n            <button onClick={playAgain}>Again</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DisplayWinner","const winArr = [\r\n  [0, 1, 2],\r\n  [3, 4, 5],\r\n  [6, 7, 8],\r\n  [0, 3, 6],\r\n  [1, 4, 7],\r\n  [2, 5, 8],\r\n  [0, 4, 8],\r\n  [2, 4, 6]\r\n]\r\n\r\nfunction isWinning(cellsArray) {\r\n    for (let i = 0; i < winArr.length; i++) {\r\n        const [a, b, c] = winArr[i];\r\n        if (cellsArray[a] && cellsArray[a] === cellsArray[b] && \r\n            cellsArray[a] === cellsArray[c]) {\r\n                return [a, b, c];\r\n            }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction newCellsArray(arr, target, currentChar) {\r\n    return arr.slice(0, target).concat(currentChar).concat(arr.slice(target + 1))\r\n}\r\n\r\nfunction checkWinOnTurn(board, action) {\r\n  let plays = board.reduce((a, e, i) => {\r\n    return (e === action) ? a.concat(i) : a;\r\n  }, []);\r\n  let gameWon = false;\r\n  for (let [index, win] of winArr.entries()) {\r\n    if (win.every(elem => plays.indexOf(elem) > -1)) {\r\n      gameWon = {\r\n        index: index,\r\n        action: action\r\n      };\r\n      break;\r\n    }\r\n  }\r\n  return gameWon;\r\n}\r\n\r\nfunction minimax(newBoard, action) {\r\n    let availableSpots = newBoard.filter(cell => typeof cell === 'number')\r\n  \r\n    if (checkWinOnTurn(newBoard, 'X')) {\r\n      return { score: -10 }\r\n    } else if (checkWinOnTurn(newBoard, 'O')) {\r\n      return { score: 10 }\r\n    } else if (availableSpots.length === 0) {\r\n      return { score: 0 }\r\n    }\r\n  \r\n    let moves = [];\r\n  \r\n    for (let i = 0; i < availableSpots.length; i++) {\r\n      let move = {};\r\n      move.index = newBoard[availableSpots[i]];\r\n      newBoard[availableSpots[i]] = action;\r\n  \r\n      if (action === 'O') {\r\n        let result = minimax(newBoard, 'X');\r\n        move.score = result.score;\r\n      } else {\r\n        let result = minimax(newBoard, 'O');\r\n        move.score = result.score;\r\n      } // end of if/else block\r\n  \r\n      newBoard[availableSpots[i]] = move.index;\r\n      moves.push(move);\r\n    } // end of for look\r\n  \r\n    let bestMove;\r\n  \r\n    if (action === 'O') {\r\n      let bestScore = -10000;\r\n      for (let i=0; i<moves.length; i++) {\r\n        if (moves[i].score > bestScore) {\r\n          bestScore = moves[i].score;\r\n          bestMove = i;\r\n        }\r\n      } // end of for loop\r\n    } \r\n    else {\r\n      let bestScore = 10000;\r\n      for (let i=0; i<moves.length; i++) {\r\n        if (moves[i].score < bestScore) {\r\n          bestScore = moves[i].score;\r\n          bestMove = i;\r\n        }\r\n      }\r\n    }\r\n  \r\n    return moves[bestMove];\r\n  }\r\n\r\nexport {isWinning, newCellsArray, minimax}","import React, { useState, useEffect } from 'react'\r\nimport Score from './score'\r\nimport Turn from './turn'\r\nimport Board from './board'\r\nimport DisplayWinner from './displayWinner'\r\n\r\nimport {isWinning, newCellsArray, minimax} from '../utils/utils';\r\n\r\nfunction Game({isGameStart, difficulty}) {\r\n    const [cellsArray, setCellsArray] = useState(Array.from(Array(9).keys()))\r\n    const [isXTurn, setIsXTurn] = useState(true)\r\n    const [isPlayerTurn, setIsPlayerTurn] = useState(Math.random() < 0.5)\r\n    const [displayWinner, setDisplayWinner] = useState(false);\r\n    const [playerScore, setPlayerScore] = useState(0)\r\n    const [computerScore, setComputerScore] = useState(0)\r\n\r\n    const playerAction = (i) => {\r\n        if (typeof cellsArray[i] === 'number' && !isWinning(cellsArray) && isPlayerTurn) {\r\n            const currentChar = isXTurn ? 'X' : 'O';\r\n            setCellsArray(newCellsArray(cellsArray, i, currentChar))\r\n            setIsXTurn(prevTurn => !prevTurn);\r\n            setIsPlayerTurn(false)\r\n        }\r\n    }\r\n    \r\n    const easyAi = (currentAction) => {\r\n        let random_action = Math.floor(Math.random() * cellsArray.length);\r\n        while(typeof cellsArray[random_action] !== 'number') { \r\n            random_action = Math.floor(Math.random() * cellsArray.length);\r\n        }\r\n        setCellsArray(newCellsArray(cellsArray, random_action, currentAction));\r\n        setIsXTurn(prevTurn => !prevTurn)\r\n        setIsPlayerTurn(true)\r\n    }\r\n\r\n    const impossibleAi = (currentAction) => {\r\n        const aiSpot = minimax([...cellsArray], currentAction).index;\r\n        setCellsArray(newCellsArray([...cellsArray], aiSpot, currentAction))\r\n        setIsXTurn(prevTurn => !prevTurn)\r\n        setIsPlayerTurn(true)\r\n    }\r\n\r\n    const computerAction = () => {\r\n        let timeOut;\r\n        if (!isPlayerTurn && !isWinning(cellsArray) && !displayWinner && isGameStart)\r\n         timeOut = setTimeout(() => {\r\n            const currentAction = isXTurn ? 'X' : 'O';\r\n            if (difficulty === 'Easy') {\r\n                easyAi(currentAction)\r\n            }\r\n            else if (difficulty === 'Medium') {\r\n                const randomDifficulty = Math.random();\r\n                randomDifficulty < 0.3 ? easyAi(currentAction) : impossibleAi(currentAction);\r\n            }\r\n            else if (difficulty === 'Impossible') {\r\n                impossibleAi(currentAction)\r\n            }\r\n            \r\n        }, 1000)\r\n        return () => {\r\n            clearTimeout(timeOut);\r\n        }\r\n    }\r\n\r\n    const playAgain = () => {\r\n        updatedScore()\r\n        setDisplayWinner(false);\r\n        const emptyCells = Array.from(Array(9).keys())\r\n        setCellsArray(emptyCells)\r\n        setIsPlayerTurn(Math.random() < 0.5)\r\n        setIsXTurn(true)\r\n    }\r\n\r\n    const updatedScore = () => {\r\n        if (isWinning(cellsArray)) {\r\n            if (isPlayerTurn) {\r\n                setComputerScore(prevScore => prevScore + 1)\r\n            } else {\r\n                setPlayerScore(prevScore => prevScore + 1)\r\n            }\r\n        }\r\n    }\r\n\r\n    const checkTie = () => {\r\n        const availableCells = cellsArray.filter(cell => typeof cell === 'number')\r\n        if (availableCells.length === 0) {\r\n            setDisplayWinner(true);\r\n        }\r\n    } \r\n\r\n    useEffect(computerAction, [isPlayerTurn, displayWinner, isGameStart])\r\n\r\n    useEffect(() => {\r\n        if (isWinning(cellsArray) || checkTie()) {\r\n            setDisplayWinner(true)\r\n        }\r\n    }, [cellsArray])\r\n\r\n    console.log(isWinning(cellsArray))\r\n    return (\r\n        <div className={isGameStart ? `game fade-in` : `hide`}>\r\n            <div className='score-board'>\r\n                <Score player={'Player'} score={playerScore}/>\r\n                <Score player={'Computer'} score={computerScore}/>\r\n            </div>\r\n            <Turn isPlayerTurn={isPlayerTurn} isWinning={isWinning(cellsArray)} isXTurn={isXTurn}/>\r\n            <Board \r\n                cellsArray={cellsArray} \r\n                playerAction={playerAction} \r\n                isXTurn={isXTurn} \r\n                isPlayerTurn={isPlayerTurn}\r\n            />\r\n            <DisplayWinner \r\n                displayWinner={displayWinner} \r\n                playAgain={playAgain} \r\n                cellsArray={cellsArray} \r\n                isWinning={isWinning}\r\n                isPlayerTurn={isPlayerTurn}\r\n                isXTurn={isXTurn}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game","import React, { useState } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport StartMenu from './components/startMenu'\nimport Game from './components/game'\n\nfunction App() {\n  const [isGameStart, setIsGameStart] = useState(false);\n  const [difficulty, setDifficulty] = useState('Medium');\n\n  const startGame = () => {\n    setIsGameStart(true)\n  }\n\n  const changeDifficulty = (event) => {\n    setDifficulty(event.target.value);\n  }\n\n  return (\n    <div className='game-container'>\n      <StartMenu \n          isGameStart={isGameStart} \n          startGame={startGame} \n          difficulty={difficulty} \n          changeDifficulty={changeDifficulty}\n      />\n      <Game isGameStart={isGameStart} difficulty={difficulty}/>\n    </div>\n  )\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}